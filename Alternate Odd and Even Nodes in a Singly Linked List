//Time Complexity : O(n)
//Space Complexity : O(1)

#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *link;
};

void push(struct node **p,int data)
{
    struct node *temp = (struct node *)malloc (sizeof(struct node));
    temp -> data = data;
    temp -> link = (*p);
    (*p) = temp;
}

void display(struct node *t)
{
    while(t)
    {
        printf("%d ",t->data);
        t = t->link;
    }
}

void segregate(struct node **a)
{
   struct node *i,*j,*k,*l,*ptr;
   struct node *even,*temp ,*prev_temp;
   
   //segregate odd and even nodes
   temp = (*a) -> link;
   prev_temp = (*a);
   
  while(temp != NULL)
  {
      struct node *p = temp -> link;
      
      if(temp->data % 2 != 0)
      {
          prev_temp -> link = p ;
          temp -> link = (*a);
          (*a) = temp;
      }
      else
      {
          prev_temp = temp;
      }
      
      temp = p;
  }
  
  //split the list into odd and even
  temp = (*a)->link;
  prev_temp = (*a);
  
  while(temp !=NULL && temp->data % 2 != 0)
  {
      prev_temp = temp ;
      temp = temp->link;
  }
  //even list
  even = temp; 
  //odd list
  prev_temp -> link = NULL;
  
  // merge them both
  i = (*a);
  j = even ;
  
  while(i!= NULL && j!=NULL)
  {
      k = i -> link ;
      l = j -> link ;
      
      i -> link = j;
      j -> link = k;
      
      //make node updatec
      ptr = j ;
      
      i = k;
      j = l;
  }
  
  if(i==NULL)
  {
      // ood list reached end
      ptr -> link = j ;
  }
}

int main()
{
    struct node *a=NULL;
    
    push(&a,5);
    push(&a,4);
    push(&a,2);
    push(&a,6);
    push(&a,3);
    push(&a,1);
    
    display(a);
    
    segregate(&a);
    
    printf("\n");
    
    display(a);
    
    return 0;
}
