
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *link;
};

void push(struct node **p,int data)
{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp -> data = data;
    temp -> link = *p;
    struct node *tp = *p;
    
    if(*p != NULL)
    {
        while(tp -> link != *p)
          tp = tp -> link ;
        tp -> link = temp;
    }
    else
    temp -> link = temp;
    
    *p = temp ;
}

void display(struct node *t)
{
    struct node *temp = t;
    if(t!= NULL)
    {
        do
        {
            printf("%d ",temp -> data);
            temp = temp -> link ;
        }while(t!=temp);
    }
}

void split(struct node *s,struct node **a,struct node **b)
{
    if(s==NULL)
    return NULL;
    
    struct node *fast_ptr = s , *slow_ptr = s;
    
    while(fast_ptr -> link != s && fast_ptr -> link -> link != s)
    {
        fast_ptr = fast_ptr -> link -> link;
        slow_ptr = slow_ptr -> link;
    }
    
    //if there are even elements in list 
    if(fast_ptr -> link -> link == s)
    fast_ptr = fast_ptr -> link;
    
     //set the pointer of first half 
    *a = s ;
    
    //set the pointer of second half 
    if(s->link != s)
    *b = slow_ptr -> link;
    
    //make second half circular 
    fast_ptr -> link = slow_ptr -> link ;
    
    // make fist half circular
    slow_ptr -> link = s;
    
}
int main()
{
    struct node *head = NULL , *a = NULL , *b = NULL; 
  
    push(&head, 12); 
    push(&head, 56); 
    push(&head, 2); 
    push(&head, 11); 

    display(head);
    
    printf("\n");
    
    split(head,&a,&b);
    
    display(a);
    
    printf("\n");
    
    display(b);
   

    return 0;
}
